<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内存 on Ipoo</title>
    <link>https://www.ipooli.com/tags/%E5%86%85%E5%AD%98/</link>
    <description>Recent content in 内存 on Ipoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 02 Sep 2020 17:40:40 +0800</lastBuildDate>
    
	<atom:link href="https://www.ipooli.com/tags/%E5%86%85%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java虚拟机垃圾回收-对象是否已死</title>
      <link>https://www.ipooli.com/2020/09/object-dead/</link>
      <pubDate>Wed, 02 Sep 2020 17:40:40 +0800</pubDate>
      
      <guid>https://www.ipooli.com/2020/09/object-dead/</guid>
      <description>如何判断对象是否已死 在堆里存放着几乎所有的对象实例，垃圾收集器在堆进行回收前，要判断对象是否还存活着。 Java堆是虚拟机所管理的内存中最大的</description>
    </item>
    
    <item>
      <title>java中GC垃圾回收机制,如何查看GC日志</title>
      <link>https://www.ipooli.com/2020/05/javagccheck/</link>
      <pubDate>Thu, 21 May 2020 15:22:39 +0800</pubDate>
      
      <guid>https://www.ipooli.com/2020/05/javagccheck/</guid>
      <description>idea 打印gc日志 添加程序运行启动参数: -XX:+PrintGCDetails 显式调用时，触发FGC: System.gc(); 命令行编译 java -verbose:gc Test 服务启动参数 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -verbose:gc -Xloggc:/home/admin/logs/gc-risk.log #gc日志输出路径 gc触发条件 YGC是什</description>
    </item>
    
  </channel>
</rss>